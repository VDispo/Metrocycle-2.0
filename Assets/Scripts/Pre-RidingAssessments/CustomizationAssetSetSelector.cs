using System.Linq;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// <em>
/// This is part of the UI prefab that is auto generated by <see cref="CharacterCustomizationHandler"/>'s array of <see cref="CustomizationAssetSetSO"/>.
/// </em>
/// <br/><br/>
/// This is a selector of which asset of the set to use (set defined by the referenced <see cref="CustomizationAssetSetSO"/>).
/// <br/><br/>
/// The selection is saved into <see cref="CustomizationAssetsSelected"/> to survive the scene change.
/// NOTE that the assets instantiated here are not the intances that survive through and make it to gameplay. 
/// Instead, <see cref="CustomizationAssetsSelected"/> saves the indeces of the assets selected and recreates them during scene change.
/// </summary>
public class CustomizationAssetSetSelector : MonoBehaviour
{
    [HideInInspector] public CustomizationAssetSetSO customizationAssetSetSO;

    [Header("Buttons")]
    [SerializeField] private Button leftSelectButton;
    [SerializeField] private Button rightSelectButton;

    [Header("Selection")]
    [SerializeField] private TextMeshProUGUI selectedText;
    private int selectedIdx = 0;

    public enum SelectDir
    {
        Back = -1,
        Next = 1
    }

    public void Initialize(CustomizationAssetSetSO customizationAssetSetSO)
    {
        this.customizationAssetSetSO = customizationAssetSetSO;
        leftSelectButton.onClick.AddListener(() => ScrollThroughAsset(SelectDir.Back));
        rightSelectButton.onClick.AddListener(() => ScrollThroughAsset(SelectDir.Next));
        UpdateSelection();
    }

    public void ScrollThroughAsset(SelectDir dir)
    {
        static int modulo(int a, int b) 
        { 
            int c = a % b; // remainder function
            return c < 0 ? c + b : c; // offset the remainder if negative
        };

        /// move next or back (wrapping)
        selectedIdx = modulo(selectedIdx + (int)dir, customizationAssetSetSO.choicesPrefabsWithPassing.Count);

        /// switch selection
        UpdateSelection();

        /// save selection
        CustomizationAssetsSelected.Instance.SaveAssetSelection(customizationAssetSetSO, selectedIdx);
    }

    // [possible TODO: destroy and instantiate are performance heavy BUT this soln is simple and it only happens in the avatar customization screen so not much problem, could optimize]
    private void UpdateSelection()
    {
        GameObject newAsset = customizationAssetSetSO.choicesPrefabsWithPassing.Keys.ToArray()[selectedIdx];
        
        // display name
        selectedText.text = newAsset.name;
        
        // destroy prev asset
        Destroy(CustomizationAssetsRefs.Instance.assets[customizationAssetSetSO.type]);
        
        // instantiate new asset
        CustomizationAssetsRefs.Instance.assets[customizationAssetSetSO.type] =
            Instantiate(newAsset, parent: CustomizationAssetsRefs.Instance.parentOfAssets[customizationAssetSetSO.type]);
    }
}
